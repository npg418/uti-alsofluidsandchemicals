plugins {
    id("java-library")
    id("eclipse")
    id("idea")
    id("maven-publish")
    id("net.neoforged.gradle.userdev") version "7.0.97"
    kotlin("jvm")
}

version = properties["mod_version"].toString()
group = properties["mod_group_id"].toString()

repositories {
    mavenLocal()
    mavenCentral()
    exclusiveContent {
        forRepository {
            maven("https://cursemaven.com")
        }
        filter {
            includeGroup("curse.maven")
        }
    }
    maven {
        name = "Kotlin for Forge"
        setUrl("https://thedarkcolour.github.io/KotlinForForge/")
    }
    maven("https://maven.shedaniel.me")
    maven("https://modmaven.dev/")
    maven {
        name = "TerraformersMC"
        setUrl("https://maven.terraformersmc.com/")
    }
}

base {
    archivesName.set(properties["mod_id"].toString())
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion.set(JavaLanguageVersion.of(17))

//minecraft.accessTransformers.file(rootProject.file("src/main/resources/META-INF/accesstransformer.cfg"))
//minecraft.accessTransformers.entry("public net.minecraft.client.Minecraft textureManager # textureManager")

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty("forge.logging.markers", "REGISTRIES")

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty("forge.logging.console.level", "debug")

        modSource(project.sourceSets["main"])
    }

    create("client") {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty("forge.enabledGameTestNamespaces", properties["mod_id"].toString())
    }

    create("server") {
        systemProperty("forge.enabledGameTestNamespaces", properties["mod_id"].toString())
        programArgument("--nogui")
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    create("gameTestServer") {
        systemProperty("forge.enabledGameTestNamespaces", properties["mod_id"].toString())
    }

    create("data") {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory = project.file("run-data")

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll(
            "--mod",
            properties["mod_id"].toString(),
            "--all",
            "--output",
            file("src/generated/resources/").absolutePath,
            "--existing",
            file("src/main/resources/").absolutePath
        )
    }
}

// Include resources generated by data generators.
sourceSets["main"].resources.srcDir("src/generated/resources")

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    named("runtimeClasspath") {
        extendsFrom(configurations["runtimeOnly"])
    }
}

dependencies {
    implementation("net.neoforged:neoforge:${properties["neo_version"]}")

    // Example optional mod dependency with JEI
    // compileOnly("mezz.jei:jei-$mc_version-common-api:$jei_version")
    // compileOnly("mezz.jei:jei-$mc_version-neoforge-api:$jei_version")
    // localRuntime("mezz.jei:jei-$mc_version-neoforge:$jei_version")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // implementation("blank:coolmod-$mc_version:$coolmod_version")

    // Example mod dependency using a file as dependency
    // implementation(files("libs/coolmod-$mc_version-$coolmod_version.jar"))

    // Example project dependency using a sister or child project:
    // implementation(project(":myproject"))

    implementation("curse.maven:untranslated-items-401770:${properties["uti_id"]}")
    implementation("thedarkcolour:kotlinforforge-neoforge:${properties["kff_version"]}")
    api("curse.maven:jade-324717:${properties["jade_id"]}")
    api("dev.emi:emi-neoforge:${properties["emi_version"]}")
    api("mekanism:Mekanism:${properties["mekanism_version"]}")
    api("appeng:appliedenergistics2-neoforge:${properties["ae2_version"]}")
    api("curse.maven:applied-mekanistics-574300:${properties["appliedmekanistics_id"]}")
}

// This block of code expands all declared replace properties in the specified resource targets.
tasks.withType<ProcessResources>().configureEach {
    val replaceProperties = mapOf(
        "minecraft_version" to properties["minecraft_version"],
        "minecraft_version_range" to properties["minecraft_version_range"],
        "neo_version" to properties["neo_version"],
        "neo_version_range" to properties["neo_version_range"],
        "loader_version_range" to properties["loader_version_range"],
        "uti_version_range" to properties["uti_version_range"],
        "mod_id" to properties["mod_id"],
        "mod_name" to properties["mod_name"],
        "mod_license" to properties["mod_license"],
        "mod_version" to properties["mod_version"],
        "mod_authors" to properties["mod_authors"],
        "mod_description" to properties["mod_description"],
        "mod_credits" to properties["mod_credits"]
    )
    inputs.properties(replaceProperties)

    filesMatching(listOf("META-INF/mods.toml")) {
        expand(replaceProperties)
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register("mavenJava", MavenPublication::class.java) {
            from(components["java"])
        }
    }
    repositories {
        maven {
            url = uri("file://${project.projectDir}/repo")
        }
    }
}

tasks.withType<JavaCompile>().configureEach {
    options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        isDownloadSources = true
        isDownloadJavadoc = true
    }
}
dependencies {
    implementation(kotlin("stdlib-jdk8"))
}
